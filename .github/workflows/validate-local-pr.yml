name: Validate PR

permissions: 
  pull-requests: write

on:
  pull_request:
    branches:
      - main
    paths: 
      - local/**

jobs:
  validate:
    name: Validate Local Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./local
    
    env:
      HUSKY: 0

    outputs:
      local-fmt: ${{ steps.fmt.outcome }}
      local-init: ${{ steps.init.outcome }}
      local-validate: ${{ steps.validate.outcome }}
      local-validate-stdout: ${{ steps.validate.outputs.stdout }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      
      - name: Validate Terraform files
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Initialize Terraform
        id: init
        run: terraform init --backend=false
        
      - name: Validate files
        id: validate
        run: terraform validate -no-color

  post-results:
    needs: [validate]
    runs-on: ubuntu-latest
      
    steps:
      # comments on the PR the outputs of this job
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Validation for Local changes')
            })
      
            // 2. Prepare format of the comment
            const output = `
            ## Terraform Validation Results
            ### Terraform Validation for Local changes
            #### Terraform Format and Style üñå\`${{ needs.validate.outputs.local-fmt }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ needs.validate.outputs.local-init }}\`
            #### Terraform Validation ü§ñ\`${{ needs.validate.outputs.local-validate }}\`
            <details><summary>Azure Validation Output</summary>
      
            \`\`\`\n
            ${{ needs.validate.outputs.local-validate-stdout }}
            \`\`\`
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`aws\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
